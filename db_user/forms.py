from django import forms
from db_user.models import DBUser
from db_user.tools import pwgen, pwcheck
from db_user.control import Control

class DBUserAdminForm(forms.ModelForm):
    passwd = forms.CharField(
        label="Password", initial=pwgen(), required=True,
        help_text="New password generated by algorithm."
    )

    def __init__(self, *args, **kwargs):
        """
        Force a generated password for new users.
        
        We need to do this in the constructor, otherwise Django somehow caches
        the generated password between page loads.
        """
        super(DBUserAdminForm, self).__init__(*args, **kwargs)
        self.fields['passwd'].initial = pwgen()


class DBUserPasswordForm(forms.ModelForm):
    """
    Present the user password change form.
    
    This form will be very basic. A user must enter their current DB password,
    and provide a replacement, with a second field to check their typing.
    The current password is checked against the shadow value stored by 
    PostgreSQL via a stored procedure specifically supplied for that use.
    """
    usename = forms.CharField(label="EDB Username", required=True)
    passwd = forms.CharField(label="Current Password", required=True)
    newpw = forms.CharField(label="New Password", required=True)
    verify = forms.CharField(label="Verify Password", required=True)

    class Meta:
        fields = ['usename', 'passwd', 'newpw', 'verify']
        model = DBUser

    def clean_passwd(self):
        """
        Confirm a user/password match
        
        We only do this step at the password level so a user can't tell if it
        was the password or username that failed the check.
        """
        username = self.cleaned_data.get('usename')
        current = self.cleaned_data.get('passwd')

        try:
            user = DBUser.objects.get(usename=username)
            if not user.check_password(current):
                raise Exception()
        except:
            raise forms.ValidationError("Unable to verify password!")

        return current


    def clean_newpw(self):
        """
        Compare the 'verify' and 'passwd' fields for validity.
        
        The main purpose of this function is to check the 'password' and
        'verify' fields, and make sure they match. This should also have a
        javascript front-end to prevent invalid submissions.
        """
        password = self.cleaned_data.get('newpw')

        if password and not pwcheck(password):
            raise forms.ValidationError("Password does not fit listed requirements.")

        return password


    def clean_verify(self):
        """
        Compare the 'verify' and 'passwd' fields for validity.
        
        The main purpose of this function is to check the 'password' and
        'verify' fields, and make sure they match. This should also have a
        javascript front-end to prevent invalid submissions.
        """
        password = self.cleaned_data.get('newpw')
        verify = self.cleaned_data.get('verify')

        if password and verify and password != verify:
            raise forms.ValidationError("New Password and Verify do not match!")

        return verify


    def save(self):
        """
        Save user changes to all database hosts.
        
        We use an external control library here because we're broadcasting
        the change to all database hosts defined in the db_host app. If we
        got this far, ideally verification steps have already taken place.
        """
        username = self.cleaned_data.get('usename')
        password = self.cleaned_data.get('newpw')

        ctl = Control()
        ctl.save(username, password)




